@charset "UTF-8";
.wrapper {
  min-height: 100%;
  display: flex;
  flex-direction: column;
  overflow: hidden;
}
.wrapper > main {
  flex: 1 1 auto;
}
.wrapper > * {
  min-width: 0;
}

/*
(i) Стили будут применяться ко 
всем классам содержащим *__container
Например header__container, main__container и т.д.
Снипет (HTML): cnt
*/
/* -----------------------------------------------------------------
                       @media
1-ый параметр $min-max принимает 3 аргумента min, max, min-max.
   min       - для mobil @media
   max       - для dectop @media
   min-max   - для промежутка между mobil-dectop @media
2-ой параметр $breakpoint_1 принимает 1-ин аргумент.
   ключ      - хранятся в созданной карте $grid_breakpoints(xxl, xl, lg, md , sm...)
3-ий параметр $breakpoint_2 принимает 1-ин аргумент, является не обязательным параметром.
   ключ      - хранятся в созданной карте $grid_breakpoints(xxl, xl, lg, md , sm...) нужен для 1-ого параметра 3 аргумента.
 Дополнение:
   map-has-key  - Нужен для проверки ключа в карте, если ключа указанного нет то условие не выполняется.
   map-get      - Нужен для использование ключей из карты.
Пример:
   @include media(max, xxl) { display: none;}
   @include media(min, xxl) { display: none;}
   @include media(min-max, mn-lg, mx-xxl) { display: none;}
Одиночные брекпоинты:
   @include media(max, 870px,) { display: none;}
   @include media(min, 870px,) { display: none;}
   @include media(min-max, 870px, 1000px) { display: none;}
--------------------------------------------------------------------*/
[class*=-ibg] {
  position: relative;
}
[class*=-ibg] img {
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  object-fit: cover;
}

[class*=-ibg_contain] img {
  object-fit: contain;
}

.fs-16 {
  font-size: 16px;
}

.fs-18 {
  font-size: 18px;
}

.fs-20 {
  font-size: 20px;
}

.fs-24 {
  font-size: 24px;
}

.fs-36 {
  font-size: 36px;
}

.fs-40 {
  font-size: 40px;
}

.fs-48 {
  font-size: 48px;
}

.fs-80 {
  font-size: 80px;
}

.lh-12 {
  line-height: 120%;
}

.lh-13 {
  line-height: 130%;
}

.lh-15 {
  line-height: 150%;
}

.fw-500 {
  font-weight: 500;
}

.fw-600 {
  font-weight: 600;
}

.fw-700 {
  font-weight: 700;
}

.ff-inter {
  font-family: "Inter";
}

.inter {
  color: #f6f3ee;
  opacity: 0.5;
  text-transform: uppercase;
  display: block;
  text-shadow: -1px -1px 0 #cfc8be, 1px -1px 0 #cfc8be, -1px 1px 0 #cfc8be, 1px 1px 0 #cfc8be;
}

.footer {
  background-color: #f6f3ee;
}
.footer__link {
  background: url("@img/icons/place.svg") no-repeat center/cover;
}

@media (min-width: 768px) {
  .footer {
    background-color: #a8986b;
  }
}
.header {
  z-index: 999;
  background-color: #a8986b;
}

@media (min-width: 768px) {
  .header {
    background-color: #a8986b;
  }
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
